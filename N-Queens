//Printing all possible solutions in N-Queens Problem
#include <stdio.h>
#define N 4
// A utility function to print the chessboard with queens marked as 'Q' and empty squares as '.'
void printChessboard(int chessboard[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            if (chessboard[i][j])
                printf(" 1 ");
            else
                printf(" 0 ");
        printf("\n");
    }
    printf("\n");
}

/* A utility function to check if a queen can be placed at a specific position on the chessboard.
   It checks the left side, upper left diagonal, and lower left diagonal for attacking queens. */
int isSafe(int chessboard[N][N], int row, int col) {
    // Check this row on the left side
    for (int i = 0; i < col; i++)
        if (chessboard[row][i])
            return 0;

    // Check the upper left diagonal
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (chessboard[i][j])
            return 0;

    // Check the lower left diagonal
    for (int i = row, j = col; j >= 0 && i < N; i++, j--)
        if (chessboard[i][j])
            return 0;

    return 1;
}

/* A recursive utility function to solve the N-Queens problem */
int solveNQueensUtil(int chessboard[N][N], int col) {
    /* Base case: If all queens are placed, then return true */
    if (col == N) {
        printChessboard(chessboard);
        return 1;
    }

    /* Consider this column and try placing a queen in each row one by one */
    int result = 0;
    for (int i = 0; i < N; i++) {
        /* Check if the queen can be placed at chessboard[i][col] */
        if (isSafe(chessboard, i, col)) {
            // Place the queen at chessboard[i][col]
            chessboard[i][col] = 1;

            // Update result if any placement is possible
            result = solveNQueensUtil(chessboard, col + 1) || result;

            /* If placing the queen at chessboard[i][col] doesn't lead to a solution,
               then remove the queen from chessboard[i][col] (Backtrack) */
            chessboard[i][col] = 0;
        }
    }

    /* If a queen cannot be placed in any row in this column col, then return false */
    return result;
}

/* This function solves the N-Queens problem using Backtracking.
   It mainly uses solveNQueensUtil() to solve the problem.
   It returns false if queens cannot be placed, otherwise returns true and
   prints the placement of queens on the chessboard. 
   Note: There may be more than one solution; this function prints one of the feasible solutions. */
void solveNQueens() {
    int chessboard[N][N] = {0};

    if (!solveNQueensUtil(chessboard, 0))
        printf("Solution does not exist");

    return;
}

// Driver Code
int main() {
    printf("\n");
    solveNQueens();
    return 0;
}
// This code is contributed by Shifa Chilwan
